问题1：查看文件的两个版本之间的差异如何帮助你了解引入的错误？
答：通过比较两个版本之间的差异，可以发现版本之间不同的地方，便于快速查找问题。

问题2：从长远来看，能轻松访问文件的整个历史记录将如何提高编程者的效率？
答：我们可以查看文件的修改记录，每个版本解决的问题，易于理解，快速定位问题。

问题3：提交频率多长合适？
答：由于可以选择何时进行提交，因此，你可能想知道该多久提交一次更改。保持较小的提交通常是一个好做法。随着两个版本之间的差异越来越大，易于理解性和实用性都会越来越低。但是，你也不希望使提交过小。如果总是在每次更改一行代码后保存提交，则历史记录会因短时间内包含大量提交而变得难以读懂。

为每项逻辑更改进行一次提交是很好的经验法则。例如，如果改正了一处打字错误，然后在文件的另一部分中改正了一个错误，则应为每项更改进行一次提交，因为这两项更改在逻辑上是独立的。如果这样做，每次提交都将具有一个易于理解的目的。Git 允许你在每次提交时都编写一条简短的信息来说明更改了什么。如果每次提交都包含一项逻辑更改，这条信息会更有用。

问题4：你认为，手动选择何时创建提交（像在 Git 中做的那样）与自动保存版本（如 Google Docs 所做的那样）各有何优缺点？
答：手动选择，可以根据需要来保存版本，灵活性高，但是用户容易犯错；
自动保存，可以自动记录历史版本，但是可能提交频率太过于频繁或提交大小太小，导致版本难于阅读。

问题5：你认为一些版本控制系统（例如 Git）允许在一次提交中保存多个文件，而其他系统（例如 Google Docs）单独对待每个文件，原因是什么？
答：我们有时需要同时跟踪多个文件，所以git允许在一次提交中保存多个文件。